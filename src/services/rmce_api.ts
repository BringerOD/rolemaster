/* tslint:disable */
/* eslint-disable */
//----------------------
// <auto-generated>
//     Generated using the NSwag toolchain v13.11.1.0 (NJsonSchema v10.4.3.0 (Newtonsoft.Json v11.0.0.0)) (http://NSwag.org)
// </auto-generated>
//----------------------
// ReSharper disable InconsistentNaming

export interface IRMCEApiClient {
  character_DeleteCharacter(id: string): Promise<SwaggerResponse<ApiResult>>;
  character_GetCharacterResultById(id: string): Promise<SwaggerResponse<ApiResultOfCharacterResult>>;
  character_AnalyzeSimilarForCharacterd(id: string): Promise<SwaggerResponse<ApiResultOfAnalyzeSimilarResult>>;
  character_GetCharacters(request: WorldPageRequestInfo): Promise<SwaggerResponse<ApiResultOfListOfCharacterResult>>;
  character_GetCharactersByCampaign(request: PageRequestByCampaign): Promise<SwaggerResponse<ApiResultOfListOfCharacterResult>>;
  character_GetGuid(): Promise<SwaggerResponse<string>>;
  character_Post(resultDto: CharacterResult): Promise<SwaggerResponse<ApiResult>>;
  character_test(): Promise<SwaggerResponse<string>>;
  world_GetWorldById(id: string): Promise<SwaggerResponse<ApiResultOfWorldResult>>;
  world_GetCampaignsByWorldId(id: string): Promise<SwaggerResponse<ApiResultOfStringOf>>;
  world_UpdateSkillName(request: WorldSkillNameUpdateRequest): Promise<SwaggerResponse<ApiResult>>;
  world_UpdateSkill(request: WorldSkillEditRequest): Promise<SwaggerResponse<ApiResult>>;
  world_GetSkillById(id: string): Promise<SwaggerResponse<ApiResultOfSkillResult>>;
  world_CreateCharacterById(request: WorldCharacterCreateRequest): Promise<SwaggerResponse<ApiResultOfCharacterResult>>;
}

export class RMCEApiClient implements IRMCEApiClient {
  private http: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> };
  private baseUrl: string;
  protected jsonParseReviver: ((key: string, value: any) => any) | undefined = undefined;

  constructor(baseUrl?: string, http?: { fetch(url: RequestInfo, init?: RequestInit): Promise<Response> }) {
    this.http = http ? http : <any>window;
    this.baseUrl = baseUrl !== undefined && baseUrl !== null ? baseUrl : "https://rmceapi.dev.leadstack.com";
  }

  protected transformOptions = async (options: RequestInit): Promise<RequestInit> => {

    options.headers = {
      ...options.headers,
      mode: 'no-cors', // It can be no-cors, cors, same-origin
      credentials: 'same-origin' // It can be include, same-origin, omit
    };
    return Promise.resolve(options);
  };


  character_DeleteCharacter(id: string): Promise<SwaggerResponse<ApiResult>> {
    let url_ = this.baseUrl + "/api/Character/DeleteCharacter/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processCharacter_DeleteCharacter(_response);
    });
  }






  protected processCharacter_DeleteCharacter(response: Response): Promise<SwaggerResponse<ApiResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  character_GetCharacterResultById(id: string): Promise<SwaggerResponse<ApiResultOfCharacterResult>> {
    let url_ = this.baseUrl + "/api/Character/GetCharacterResultById/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processCharacter_GetCharacterResultById(_response);
    });
  }


  protected processCharacter_GetCharacterResultById(response: Response): Promise<SwaggerResponse<ApiResultOfCharacterResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResultOfCharacterResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResultOfCharacterResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  character_AnalyzeSimilarForCharacterd(id: string): Promise<SwaggerResponse<ApiResultOfAnalyzeSimilarResult>> {
    let url_ = this.baseUrl + "/api/Character/AnalyzeSimilarForCharacterd/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processCharacter_AnalyzeSimilarForCharacterd(_response);
    });
  }

  protected processCharacter_AnalyzeSimilarForCharacterd(response: Response): Promise<SwaggerResponse<ApiResultOfAnalyzeSimilarResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResultOfAnalyzeSimilarResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResultOfAnalyzeSimilarResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  character_GetCharacters(request: WorldPageRequestInfo): Promise<SwaggerResponse<ApiResultOfListOfCharacterResult>> {
    let url_ = this.baseUrl + "/api/Character/GetCharacters";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processCharacter_GetCharacters(_response);
    });
  }

  protected processCharacter_GetCharacters(response: Response): Promise<SwaggerResponse<ApiResultOfListOfCharacterResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResultOfListOfCharacterResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResultOfListOfCharacterResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  character_GetCharactersByCampaign(request: PageRequestByCampaign): Promise<SwaggerResponse<ApiResultOfListOfCharacterResult>> {
    let url_ = this.baseUrl + "/api/Character/GetCharactersByCampaign";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processCharacter_GetCharactersByCampaign(_response);
    });
  }

  protected processCharacter_GetCharactersByCampaign(response: Response): Promise<SwaggerResponse<ApiResultOfListOfCharacterResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResultOfListOfCharacterResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResultOfListOfCharacterResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  character_GetGuid(): Promise<SwaggerResponse<string>> {
    let url_ = this.baseUrl + "/api/Character/GetGuid";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processCharacter_GetGuid(_response);
    });
  }

  protected processCharacter_GetGuid(response: Response): Promise<SwaggerResponse<string>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<string>>(new SwaggerResponse(status, _headers, <any>null));
  }

  character_Post(resultDto: CharacterResult): Promise<SwaggerResponse<ApiResult>> {
    let url_ = this.baseUrl + "/api/Character";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(resultDto);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processCharacter_Post(_response);
    });
  }

  protected processCharacter_Post(response: Response): Promise<SwaggerResponse<ApiResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  character_test(): Promise<SwaggerResponse<string>> {
    let url_ = this.baseUrl + "/api/Character/test";
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processCharacter_test(_response);
    });
  }

  protected processCharacter_test(response: Response): Promise<SwaggerResponse<string>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = resultData200 !== undefined ? resultData200 : <any>null;
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<string>>(new SwaggerResponse(status, _headers, <any>null));
  }

  world_GetWorldById(id: string): Promise<SwaggerResponse<ApiResultOfWorldResult>> {
    let url_ = this.baseUrl + "/api/World/GetWorldById/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processWorld_GetWorldById(_response);
    });
  }

  protected processWorld_GetWorldById(response: Response): Promise<SwaggerResponse<ApiResultOfWorldResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResultOfWorldResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResultOfWorldResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  world_GetCampaignsByWorldId(id: string): Promise<SwaggerResponse<ApiResultOfStringOf>> {
    let url_ = this.baseUrl + "/api/World/GetCampaignsByWorldId/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processWorld_GetCampaignsByWorldId(_response);
    });
  }

  protected processWorld_GetCampaignsByWorldId(response: Response): Promise<SwaggerResponse<ApiResultOfStringOf>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResultOfStringOf.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResultOfStringOf>>(new SwaggerResponse(status, _headers, <any>null));
  }

  world_UpdateSkillName(request: WorldSkillNameUpdateRequest): Promise<SwaggerResponse<ApiResult>> {
    let url_ = this.baseUrl + "/api/World/UpdateSkillName";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processWorld_UpdateSkillName(_response);
    });
  }

  protected processWorld_UpdateSkillName(response: Response): Promise<SwaggerResponse<ApiResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  world_UpdateSkill(request: WorldSkillEditRequest): Promise<SwaggerResponse<ApiResult>> {
    let url_ = this.baseUrl + "/api/World/UpdateSkill";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processWorld_UpdateSkill(_response);
    });
  }

  protected processWorld_UpdateSkill(response: Response): Promise<SwaggerResponse<ApiResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  world_GetSkillById(id: string): Promise<SwaggerResponse<ApiResultOfSkillResult>> {
    let url_ = this.baseUrl + "/api/World/GetSkillById/{id}";
    if (id === undefined || id === null)
      throw new Error("The parameter 'id' must be defined.");
    url_ = url_.replace("{id}", encodeURIComponent("" + id));
    url_ = url_.replace(/[?&]$/, "");

    let options_ = <RequestInit>{
      method: "GET",
      headers: {
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processWorld_GetSkillById(_response);
    });
  }

  protected processWorld_GetSkillById(response: Response): Promise<SwaggerResponse<ApiResultOfSkillResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResultOfSkillResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResultOfSkillResult>>(new SwaggerResponse(status, _headers, <any>null));
  }

  world_CreateCharacterById(request: WorldCharacterCreateRequest): Promise<SwaggerResponse<ApiResultOfCharacterResult>> {
    let url_ = this.baseUrl + "/api/World/CreateCharacterById";
    url_ = url_.replace(/[?&]$/, "");

    const content_ = JSON.stringify(request);

    let options_ = <RequestInit>{
      body: content_,
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "Accept": "application/json"
      }
    };

    return this.transformOptions(options_).then(transformedOptions_ => {
      return this.http.fetch(url_, transformedOptions_);
    }).then((_response: Response) => {
      return this.processWorld_CreateCharacterById(_response);
    });
  }

  protected processWorld_CreateCharacterById(response: Response): Promise<SwaggerResponse<ApiResultOfCharacterResult>> {
    const status = response.status;
    let _headers: any = {}; if (response.headers && response.headers.forEach) { response.headers.forEach((v: any, k: any) => _headers[k] = v); };
    if (status === 200) {
      return response.text().then((_responseText) => {
        let result200: any = null;
        let resultData200 = _responseText === "" ? null : JSON.parse(_responseText, this.jsonParseReviver);
        result200 = ApiResultOfCharacterResult.fromJS(resultData200);
        return new SwaggerResponse(status, _headers, result200);
      });
    } else if (status !== 200 && status !== 204) {
      return response.text().then((_responseText) => {
        return throwException("An unexpected server error occurred.", status, _responseText, _headers);
      });
    }
    return Promise.resolve<SwaggerResponse<ApiResultOfCharacterResult>>(new SwaggerResponse(status, _headers, <any>null));
  }
}

export class ApiResult implements IApiResult {
  success!: boolean;
  message?: string | undefined;
  errors?: string[] | undefined;
  stackTrace?: string | undefined;

  constructor(data?: IApiResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.success = _data["Success"];
      this.message = _data["Message"];
      if (Array.isArray(_data["Errors"])) {
        this.errors = [] as any;
        for (let item of _data["Errors"])
          this.errors!.push(item);
      }
      this.stackTrace = _data["StackTrace"];
    }
  }

  static fromJS(data: any): ApiResult {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Success"] = this.success;
    data["Message"] = this.message;
    if (Array.isArray(this.errors)) {
      data["Errors"] = [];
      for (let item of this.errors)
        data["Errors"].push(item);
    }
    data["StackTrace"] = this.stackTrace;
    return data;
  }
}

export interface IApiResult {
  success: boolean;
  message?: string | undefined;
  errors?: string[] | undefined;
  stackTrace?: string | undefined;
}

export class ApiResultOfCharacterResult extends ApiResult implements IApiResultOfCharacterResult {
  content?: CharacterResult | undefined;

  constructor(data?: IApiResultOfCharacterResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.content = _data["Content"] ? CharacterResult.fromJS(_data["Content"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ApiResultOfCharacterResult {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResultOfCharacterResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Content"] = this.content ? this.content.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IApiResultOfCharacterResult extends IApiResult {
  content?: CharacterResult | undefined;
}

export class BaseResult implements IBaseResult {
  id!: string;
  objectState!: ResultState;

  constructor(data?: IBaseResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["Id"];
      this.objectState = _data["ObjectState"];
    }
  }

  static fromJS(data: any): BaseResult {
    data = typeof data === 'object' ? data : {};
    let result = new BaseResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id;
    data["ObjectState"] = this.objectState;
    return data;
  }
}

export interface IBaseResult {
  id: string;
  objectState: ResultState;
}

export class CharacterResult extends BaseResult implements ICharacterResult {
  campaign?: string | undefined;
  worldId!: string;
  age!: number;
  apperance!: number;
  classId!: string;
  className?: string | undefined;
  experience!: number;
  description?: string | undefined;
  eyeColor?: string | undefined;
  gender!: string;
  hairColor?: string | undefined;
  height?: string | undefined;
  hits1!: number;
  hits2!: number;
  level!: number;
  money!: number;
  move!: number;
  name?: string | undefined;
  powerPointMultiplier!: number;
  primaryDevelopment!: number;
  raceId!: string;
  raceName?: string | undefined;
  secondaryDevelopment!: number;
  socialStatus!: number;
  type?: string | undefined;
  weight!: number;
  world?: WorldResult | undefined;
  movementRates?: CharacterMovementRateResult[] | undefined;
  developmentData?: CharacterDevelopmentResult[] | undefined;
  primarySkills?: CharacterDevelopmentResult[] | undefined;
  secondarySkills?: CharacterDevelopmentResult[] | undefined;
  languages?: CharacterLanguageResult[] | undefined;
  log?: CharacterLogResult[] | undefined;
  items?: CharacterItemResult[] | undefined;
  realms?: CharacterRealmResult[] | undefined;
  spellLists?: CharacterSpellListResult[] | undefined;
  baseSpellLists?: CharacterBaseSpellListResult[] | undefined;
  stats?: CharacterStatResult[] | undefined;
  experienceLog?: CharacterExperienceLogResult[] | undefined;
  topStats?: CharacterDevelopmentResult[] | undefined;
  allTopStats?: CharacterDevelopmentResult[] | undefined;
  similars?: AnalyzeSimilarResult | undefined;

  constructor(data?: ICharacterResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.campaign = _data["Campaign"];
      this.worldId = _data["WorldId"];
      this.age = _data["Age"];
      this.apperance = _data["Apperance"];
      this.classId = _data["ClassId"];
      this.className = _data["ClassName"];
      this.experience = _data["Experience"];
      this.description = _data["Description"];
      this.eyeColor = _data["EyeColor"];
      this.gender = _data["Gender"];
      this.hairColor = _data["HairColor"];
      this.height = _data["Height"];
      this.hits1 = _data["Hits1"];
      this.hits2 = _data["Hits2"];
      this.level = _data["Level"];
      this.money = _data["Money"];
      this.move = _data["Move"];
      this.name = _data["Name"];
      this.powerPointMultiplier = _data["PowerPointMultiplier"];
      this.primaryDevelopment = _data["PrimaryDevelopment"];
      this.raceId = _data["RaceId"];
      this.raceName = _data["RaceName"];
      this.secondaryDevelopment = _data["SecondaryDevelopment"];
      this.socialStatus = _data["SocialStatus"];
      this.type = _data["Type"];
      this.weight = _data["Weight"];
      this.world = _data["World"] ? WorldResult.fromJS(_data["World"]) : <any>undefined;
      if (Array.isArray(_data["MovementRates"])) {
        this.movementRates = [] as any;
        for (let item of _data["MovementRates"])
          this.movementRates!.push(CharacterMovementRateResult.fromJS(item));
      }
      if (Array.isArray(_data["DevelopmentData"])) {
        this.developmentData = [] as any;
        for (let item of _data["DevelopmentData"])
          this.developmentData!.push(CharacterDevelopmentResult.fromJS(item));
      }
      if (Array.isArray(_data["PrimarySkills"])) {
        this.primarySkills = [] as any;
        for (let item of _data["PrimarySkills"])
          this.primarySkills!.push(CharacterDevelopmentResult.fromJS(item));
      }
      if (Array.isArray(_data["SecondarySkills"])) {
        this.secondarySkills = [] as any;
        for (let item of _data["SecondarySkills"])
          this.secondarySkills!.push(CharacterDevelopmentResult.fromJS(item));
      }
      if (Array.isArray(_data["Languages"])) {
        this.languages = [] as any;
        for (let item of _data["Languages"])
          this.languages!.push(CharacterLanguageResult.fromJS(item));
      }
      if (Array.isArray(_data["Log"])) {
        this.log = [] as any;
        for (let item of _data["Log"])
          this.log!.push(CharacterLogResult.fromJS(item));
      }
      if (Array.isArray(_data["Items"])) {
        this.items = [] as any;
        for (let item of _data["Items"])
          this.items!.push(CharacterItemResult.fromJS(item));
      }
      if (Array.isArray(_data["Realms"])) {
        this.realms = [] as any;
        for (let item of _data["Realms"])
          this.realms!.push(CharacterRealmResult.fromJS(item));
      }
      if (Array.isArray(_data["SpellLists"])) {
        this.spellLists = [] as any;
        for (let item of _data["SpellLists"])
          this.spellLists!.push(CharacterSpellListResult.fromJS(item));
      }
      if (Array.isArray(_data["BaseSpellLists"])) {
        this.baseSpellLists = [] as any;
        for (let item of _data["BaseSpellLists"])
          this.baseSpellLists!.push(CharacterBaseSpellListResult.fromJS(item));
      }
      if (Array.isArray(_data["Stats"])) {
        this.stats = [] as any;
        for (let item of _data["Stats"])
          this.stats!.push(CharacterStatResult.fromJS(item));
      }
      if (Array.isArray(_data["ExperienceLog"])) {
        this.experienceLog = [] as any;
        for (let item of _data["ExperienceLog"])
          this.experienceLog!.push(CharacterExperienceLogResult.fromJS(item));
      }
      if (Array.isArray(_data["TopStats"])) {
        this.topStats = [] as any;
        for (let item of _data["TopStats"])
          this.topStats!.push(CharacterDevelopmentResult.fromJS(item));
      }
      if (Array.isArray(_data["AllTopStats"])) {
        this.allTopStats = [] as any;
        for (let item of _data["AllTopStats"])
          this.allTopStats!.push(CharacterDevelopmentResult.fromJS(item));
      }
      this.similars = _data["Similars"] ? AnalyzeSimilarResult.fromJS(_data["Similars"]) : <any>undefined;
    }
  }

  static fromJS(data: any): CharacterResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Campaign"] = this.campaign;
    data["WorldId"] = this.worldId;
    data["Age"] = this.age;
    data["Apperance"] = this.apperance;
    data["ClassId"] = this.classId;
    data["ClassName"] = this.className;
    data["Experience"] = this.experience;
    data["Description"] = this.description;
    data["EyeColor"] = this.eyeColor;
    data["Gender"] = this.gender;
    data["HairColor"] = this.hairColor;
    data["Height"] = this.height;
    data["Hits1"] = this.hits1;
    data["Hits2"] = this.hits2;
    data["Level"] = this.level;
    data["Money"] = this.money;
    data["Move"] = this.move;
    data["Name"] = this.name;
    data["PowerPointMultiplier"] = this.powerPointMultiplier;
    data["PrimaryDevelopment"] = this.primaryDevelopment;
    data["RaceId"] = this.raceId;
    data["RaceName"] = this.raceName;
    data["SecondaryDevelopment"] = this.secondaryDevelopment;
    data["SocialStatus"] = this.socialStatus;
    data["Type"] = this.type;
    data["Weight"] = this.weight;
    data["World"] = this.world ? this.world.toJSON() : <any>undefined;
    if (Array.isArray(this.movementRates)) {
      data["MovementRates"] = [];
      for (let item of this.movementRates)
        data["MovementRates"].push(item.toJSON());
    }
    if (Array.isArray(this.developmentData)) {
      data["DevelopmentData"] = [];
      for (let item of this.developmentData)
        data["DevelopmentData"].push(item.toJSON());
    }
    if (Array.isArray(this.primarySkills)) {
      data["PrimarySkills"] = [];
      for (let item of this.primarySkills)
        data["PrimarySkills"].push(item.toJSON());
    }
    if (Array.isArray(this.secondarySkills)) {
      data["SecondarySkills"] = [];
      for (let item of this.secondarySkills)
        data["SecondarySkills"].push(item.toJSON());
    }
    if (Array.isArray(this.languages)) {
      data["Languages"] = [];
      for (let item of this.languages)
        data["Languages"].push(item.toJSON());
    }
    if (Array.isArray(this.log)) {
      data["Log"] = [];
      for (let item of this.log)
        data["Log"].push(item.toJSON());
    }
    if (Array.isArray(this.items)) {
      data["Items"] = [];
      for (let item of this.items)
        data["Items"].push(item.toJSON());
    }
    if (Array.isArray(this.realms)) {
      data["Realms"] = [];
      for (let item of this.realms)
        data["Realms"].push(item.toJSON());
    }
    if (Array.isArray(this.spellLists)) {
      data["SpellLists"] = [];
      for (let item of this.spellLists)
        data["SpellLists"].push(item.toJSON());
    }
    if (Array.isArray(this.baseSpellLists)) {
      data["BaseSpellLists"] = [];
      for (let item of this.baseSpellLists)
        data["BaseSpellLists"].push(item.toJSON());
    }
    if (Array.isArray(this.stats)) {
      data["Stats"] = [];
      for (let item of this.stats)
        data["Stats"].push(item.toJSON());
    }
    if (Array.isArray(this.experienceLog)) {
      data["ExperienceLog"] = [];
      for (let item of this.experienceLog)
        data["ExperienceLog"].push(item.toJSON());
    }
    if (Array.isArray(this.topStats)) {
      data["TopStats"] = [];
      for (let item of this.topStats)
        data["TopStats"].push(item.toJSON());
    }
    if (Array.isArray(this.allTopStats)) {
      data["AllTopStats"] = [];
      for (let item of this.allTopStats)
        data["AllTopStats"].push(item.toJSON());
    }
    data["Similars"] = this.similars ? this.similars.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterResult extends IBaseResult {
  campaign?: string | undefined;
  worldId: string;
  age: number;
  apperance: number;
  classId: string;
  className?: string | undefined;
  experience: number;
  description?: string | undefined;
  eyeColor?: string | undefined;
  gender: string;
  hairColor?: string | undefined;
  height?: string | undefined;
  hits1: number;
  hits2: number;
  level: number;
  money: number;
  move: number;
  name?: string | undefined;
  powerPointMultiplier: number;
  primaryDevelopment: number;
  raceId: string;
  raceName?: string | undefined;
  secondaryDevelopment: number;
  socialStatus: number;
  type?: string | undefined;
  weight: number;
  world?: WorldResult | undefined;
  movementRates?: CharacterMovementRateResult[] | undefined;
  developmentData?: CharacterDevelopmentResult[] | undefined;
  primarySkills?: CharacterDevelopmentResult[] | undefined;
  secondarySkills?: CharacterDevelopmentResult[] | undefined;
  languages?: CharacterLanguageResult[] | undefined;
  log?: CharacterLogResult[] | undefined;
  items?: CharacterItemResult[] | undefined;
  realms?: CharacterRealmResult[] | undefined;
  spellLists?: CharacterSpellListResult[] | undefined;
  baseSpellLists?: CharacterBaseSpellListResult[] | undefined;
  stats?: CharacterStatResult[] | undefined;
  experienceLog?: CharacterExperienceLogResult[] | undefined;
  topStats?: CharacterDevelopmentResult[] | undefined;
  allTopStats?: CharacterDevelopmentResult[] | undefined;
  similars?: AnalyzeSimilarResult | undefined;
}

export class WorldResult extends BaseResult implements IWorldResult {
  worldId!: string;
  name?: string | undefined;
  classes?: ClassViewItem[] | undefined;
  races?: RaceViewItem[] | undefined;
  skills?: SkillResult[] | undefined;
  spellLists?: SpellListResult[] | undefined;
  herbs?: HerbResult[] | undefined;
  items?: ItemResult[] | undefined;
  weapons?: WeaponResult[] | undefined;
  statistics?: StatisticResult[] | undefined;
  categories?: CategoryResult[] | undefined;
  statisticBonuses?: StatisticBonusResult[] | undefined;
  spellListTypes?: SpellListTypeResult[] | undefined;
  spellUserTypes?: SpellUserTypeResult[] | undefined;

  constructor(data?: IWorldResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.worldId = _data["WorldId"];
      this.name = _data["Name"];
      if (Array.isArray(_data["Classes"])) {
        this.classes = [] as any;
        for (let item of _data["Classes"])
          this.classes!.push(ClassViewItem.fromJS(item));
      }
      if (Array.isArray(_data["Races"])) {
        this.races = [] as any;
        for (let item of _data["Races"])
          this.races!.push(RaceViewItem.fromJS(item));
      }
      if (Array.isArray(_data["Skills"])) {
        this.skills = [] as any;
        for (let item of _data["Skills"])
          this.skills!.push(SkillResult.fromJS(item));
      }
      if (Array.isArray(_data["SpellLists"])) {
        this.spellLists = [] as any;
        for (let item of _data["SpellLists"])
          this.spellLists!.push(SpellListResult.fromJS(item));
      }
      if (Array.isArray(_data["Herbs"])) {
        this.herbs = [] as any;
        for (let item of _data["Herbs"])
          this.herbs!.push(HerbResult.fromJS(item));
      }
      if (Array.isArray(_data["Items"])) {
        this.items = [] as any;
        for (let item of _data["Items"])
          this.items!.push(ItemResult.fromJS(item));
      }
      if (Array.isArray(_data["Weapons"])) {
        this.weapons = [] as any;
        for (let item of _data["Weapons"])
          this.weapons!.push(WeaponResult.fromJS(item));
      }
      if (Array.isArray(_data["Statistics"])) {
        this.statistics = [] as any;
        for (let item of _data["Statistics"])
          this.statistics!.push(StatisticResult.fromJS(item));
      }
      if (Array.isArray(_data["Categories"])) {
        this.categories = [] as any;
        for (let item of _data["Categories"])
          this.categories!.push(CategoryResult.fromJS(item));
      }
      if (Array.isArray(_data["StatisticBonuses"])) {
        this.statisticBonuses = [] as any;
        for (let item of _data["StatisticBonuses"])
          this.statisticBonuses!.push(StatisticBonusResult.fromJS(item));
      }
      if (Array.isArray(_data["SpellListTypes"])) {
        this.spellListTypes = [] as any;
        for (let item of _data["SpellListTypes"])
          this.spellListTypes!.push(SpellListTypeResult.fromJS(item));
      }
      if (Array.isArray(_data["SpellUserTypes"])) {
        this.spellUserTypes = [] as any;
        for (let item of _data["SpellUserTypes"])
          this.spellUserTypes!.push(SpellUserTypeResult.fromJS(item));
      }
    }
  }

  static fromJS(data: any): WorldResult {
    data = typeof data === 'object' ? data : {};
    let result = new WorldResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["WorldId"] = this.worldId;
    data["Name"] = this.name;
    if (Array.isArray(this.classes)) {
      data["Classes"] = [];
      for (let item of this.classes)
        data["Classes"].push(item.toJSON());
    }
    if (Array.isArray(this.races)) {
      data["Races"] = [];
      for (let item of this.races)
        data["Races"].push(item.toJSON());
    }
    if (Array.isArray(this.skills)) {
      data["Skills"] = [];
      for (let item of this.skills)
        data["Skills"].push(item.toJSON());
    }
    if (Array.isArray(this.spellLists)) {
      data["SpellLists"] = [];
      for (let item of this.spellLists)
        data["SpellLists"].push(item.toJSON());
    }
    if (Array.isArray(this.herbs)) {
      data["Herbs"] = [];
      for (let item of this.herbs)
        data["Herbs"].push(item.toJSON());
    }
    if (Array.isArray(this.items)) {
      data["Items"] = [];
      for (let item of this.items)
        data["Items"].push(item.toJSON());
    }
    if (Array.isArray(this.weapons)) {
      data["Weapons"] = [];
      for (let item of this.weapons)
        data["Weapons"].push(item.toJSON());
    }
    if (Array.isArray(this.statistics)) {
      data["Statistics"] = [];
      for (let item of this.statistics)
        data["Statistics"].push(item.toJSON());
    }
    if (Array.isArray(this.categories)) {
      data["Categories"] = [];
      for (let item of this.categories)
        data["Categories"].push(item.toJSON());
    }
    if (Array.isArray(this.statisticBonuses)) {
      data["StatisticBonuses"] = [];
      for (let item of this.statisticBonuses)
        data["StatisticBonuses"].push(item.toJSON());
    }
    if (Array.isArray(this.spellListTypes)) {
      data["SpellListTypes"] = [];
      for (let item of this.spellListTypes)
        data["SpellListTypes"].push(item.toJSON());
    }
    if (Array.isArray(this.spellUserTypes)) {
      data["SpellUserTypes"] = [];
      for (let item of this.spellUserTypes)
        data["SpellUserTypes"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}

export interface IWorldResult extends IBaseResult {
  worldId: string;
  name?: string | undefined;
  classes?: ClassViewItem[] | undefined;
  races?: RaceViewItem[] | undefined;
  skills?: SkillResult[] | undefined;
  spellLists?: SpellListResult[] | undefined;
  herbs?: HerbResult[] | undefined;
  items?: ItemResult[] | undefined;
  weapons?: WeaponResult[] | undefined;
  statistics?: StatisticResult[] | undefined;
  categories?: CategoryResult[] | undefined;
  statisticBonuses?: StatisticBonusResult[] | undefined;
  spellListTypes?: SpellListTypeResult[] | undefined;
  spellUserTypes?: SpellUserTypeResult[] | undefined;
}

export class ClassViewItem extends BaseResult implements IClassViewItem {
  name?: string | undefined;

  constructor(data?: IClassViewItem) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data["Name"];
    }
  }

  static fromJS(data: any): ClassViewItem {
    data = typeof data === 'object' ? data : {};
    let result = new ClassViewItem();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Name"] = this.name;
    super.toJSON(data);
    return data;
  }
}

export interface IClassViewItem extends IBaseResult {
  name?: string | undefined;
}

export enum ResultState {
  Unchanged = 0,
  Modified = 1,
  Added = 2,
  Deleted = 3,
}

export class RaceViewItem extends BaseResult implements IRaceViewItem {
  name?: string | undefined;

  constructor(data?: IRaceViewItem) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data["Name"];
    }
  }

  static fromJS(data: any): RaceViewItem {
    data = typeof data === 'object' ? data : {};
    let result = new RaceViewItem();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Name"] = this.name;
    super.toJSON(data);
    return data;
  }
}

export interface IRaceViewItem extends IBaseResult {
  name?: string | undefined;
}

export class SkillResult extends BaseResult implements ISkillResult {
  categoryId?: string | undefined;
  expandable!: boolean;
  description?: string | undefined;
  name?: string | undefined;
  primary!: number;
  firstStatId?: string | undefined;
  secondStatId?: string | undefined;
  thirdStatId?: string | undefined;
  singleRank!: boolean;
  doesNotDegrade!: boolean;
  sortOrder!: number;

  constructor(data?: ISkillResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.categoryId = _data["CategoryId"];
      this.expandable = _data["Expandable"];
      this.description = _data["Description"];
      this.name = _data["Name"];
      this.primary = _data["Primary"];
      this.firstStatId = _data["FirstStatId"];
      this.secondStatId = _data["SecondStatId"];
      this.thirdStatId = _data["ThirdStatId"];
      this.singleRank = _data["SingleRank"];
      this.doesNotDegrade = _data["DoesNotDegrade"];
      this.sortOrder = _data["SortOrder"];
    }
  }

  static fromJS(data: any): SkillResult {
    data = typeof data === 'object' ? data : {};
    let result = new SkillResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["CategoryId"] = this.categoryId;
    data["Expandable"] = this.expandable;
    data["Description"] = this.description;
    data["Name"] = this.name;
    data["Primary"] = this.primary;
    data["FirstStatId"] = this.firstStatId;
    data["SecondStatId"] = this.secondStatId;
    data["ThirdStatId"] = this.thirdStatId;
    data["SingleRank"] = this.singleRank;
    data["DoesNotDegrade"] = this.doesNotDegrade;
    data["SortOrder"] = this.sortOrder;
    super.toJSON(data);
    return data;
  }
}

export interface ISkillResult extends IBaseResult {
  categoryId?: string | undefined;
  expandable: boolean;
  description?: string | undefined;
  name?: string | undefined;
  primary: number;
  firstStatId?: string | undefined;
  secondStatId?: string | undefined;
  thirdStatId?: string | undefined;
  singleRank: boolean;
  doesNotDegrade: boolean;
  sortOrder: number;
}

export class SpellListResult extends BaseResult implements ISpellListResult {
  book?: string | undefined;
  classesThatUseList?: string | undefined;
  name?: string | undefined;
  page?: number | undefined;
  spellListTypeId?: string | undefined;
  spellListTypeName?: string | undefined;
  worldId!: string;

  constructor(data?: ISpellListResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.book = _data["Book"];
      this.classesThatUseList = _data["ClassesThatUseList"];
      this.name = _data["Name"];
      this.page = _data["Page"];
      this.spellListTypeId = _data["SpellListTypeId"];
      this.spellListTypeName = _data["SpellListTypeName"];
      this.worldId = _data["WorldId"];
    }
  }

  static fromJS(data: any): SpellListResult {
    data = typeof data === 'object' ? data : {};
    let result = new SpellListResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Book"] = this.book;
    data["ClassesThatUseList"] = this.classesThatUseList;
    data["Name"] = this.name;
    data["Page"] = this.page;
    data["SpellListTypeId"] = this.spellListTypeId;
    data["SpellListTypeName"] = this.spellListTypeName;
    data["WorldId"] = this.worldId;
    super.toJSON(data);
    return data;
  }
}

export interface ISpellListResult extends IBaseResult {
  book?: string | undefined;
  classesThatUseList?: string | undefined;
  name?: string | undefined;
  page?: number | undefined;
  spellListTypeId?: string | undefined;
  spellListTypeName?: string | undefined;
  worldId: string;
}

export class BaseItemResult extends BaseResult implements IBaseItemResult {
  name?: string | undefined;
  cost?: number | undefined;

  constructor(data?: IBaseItemResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data["Name"];
      this.cost = _data["Cost"];
    }
  }

  static fromJS(data: any): BaseItemResult {
    data = typeof data === 'object' ? data : {};
    let result = new BaseItemResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Name"] = this.name;
    data["Cost"] = this.cost;
    super.toJSON(data);
    return data;
  }
}

export interface IBaseItemResult extends IBaseResult {
  name?: string | undefined;
  cost?: number | undefined;
}

export class HerbResult extends BaseItemResult implements IHerbResult {
  effectsWhenUsed?: string | undefined;
  preparation?: string | undefined;
  prepared?: number | undefined;
  raw?: string | undefined;
  whereFound?: string | undefined;
  percentage?: string | undefined;

  constructor(data?: IHerbResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.effectsWhenUsed = _data["EffectsWhenUsed"];
      this.preparation = _data["Preparation"];
      this.prepared = _data["Prepared"];
      this.raw = _data["Raw"];
      this.whereFound = _data["WhereFound"];
      this.percentage = _data["Percentage"];
    }
  }

  static fromJS(data: any): HerbResult {
    data = typeof data === 'object' ? data : {};
    let result = new HerbResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["EffectsWhenUsed"] = this.effectsWhenUsed;
    data["Preparation"] = this.preparation;
    data["Prepared"] = this.prepared;
    data["Raw"] = this.raw;
    data["WhereFound"] = this.whereFound;
    data["Percentage"] = this.percentage;
    super.toJSON(data);
    return data;
  }
}

export interface IHerbResult extends IBaseItemResult {
  effectsWhenUsed?: string | undefined;
  preparation?: string | undefined;
  prepared?: number | undefined;
  raw?: string | undefined;
  whereFound?: string | undefined;
  percentage?: string | undefined;
}

export class ItemResult extends BaseItemResult implements IItemResult {

  constructor(data?: IItemResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
  }

  static fromJS(data: any): ItemResult {
    data = typeof data === 'object' ? data : {};
    let result = new ItemResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    super.toJSON(data);
    return data;
  }
}

export interface IItemResult extends IBaseItemResult {
}

export class WeaponResult extends BaseItemResult implements IWeaponResult {
  type?: number | undefined;

  constructor(data?: IWeaponResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.type = _data["Type"];
    }
  }

  static fromJS(data: any): WeaponResult {
    data = typeof data === 'object' ? data : {};
    let result = new WeaponResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Type"] = this.type;
    super.toJSON(data);
    return data;
  }
}

export interface IWeaponResult extends IBaseItemResult {
  type?: number | undefined;
}

export class StatisticResult extends BaseResult implements IStatisticResult {
  development!: boolean;
  name?: string | undefined;
  stat?: string | undefined;
  sortOrder!: number;

  constructor(data?: IStatisticResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.development = _data["Development"];
      this.name = _data["Name"];
      this.stat = _data["Stat"];
      this.sortOrder = _data["SortOrder"];
    }
  }

  static fromJS(data: any): StatisticResult {
    data = typeof data === 'object' ? data : {};
    let result = new StatisticResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Development"] = this.development;
    data["Name"] = this.name;
    data["Stat"] = this.stat;
    data["SortOrder"] = this.sortOrder;
    super.toJSON(data);
    return data;
  }
}

export interface IStatisticResult extends IBaseResult {
  development: boolean;
  name?: string | undefined;
  stat?: string | undefined;
  sortOrder: number;
}

export class CategoryResult extends BaseResult implements ICategoryResult {
  name?: string | undefined;

  constructor(data?: ICategoryResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data["Name"];
    }
  }

  static fromJS(data: any): CategoryResult {
    data = typeof data === 'object' ? data : {};
    let result = new CategoryResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Name"] = this.name;
    super.toJSON(data);
    return data;
  }
}

export interface ICategoryResult extends IBaseResult {
  name?: string | undefined;
}

export class StatisticBonusResult extends BaseResult implements IStatisticBonusResult {
  roll!: number;
  development?: number | undefined;
  powerPoints?: number | undefined;
  bonus?: number | undefined;

  constructor(data?: IStatisticBonusResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.roll = _data["Roll"];
      this.development = _data["Development"];
      this.powerPoints = _data["PowerPoints"];
      this.bonus = _data["Bonus"];
    }
  }

  static fromJS(data: any): StatisticBonusResult {
    data = typeof data === 'object' ? data : {};
    let result = new StatisticBonusResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Roll"] = this.roll;
    data["Development"] = this.development;
    data["PowerPoints"] = this.powerPoints;
    data["Bonus"] = this.bonus;
    super.toJSON(data);
    return data;
  }
}

export interface IStatisticBonusResult extends IBaseResult {
  roll: number;
  development?: number | undefined;
  powerPoints?: number | undefined;
  bonus?: number | undefined;
}

export class SpellListTypeResult extends BaseResult implements ISpellListTypeResult {
  name?: string | undefined;

  constructor(data?: ISpellListTypeResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data["Name"];
    }
  }

  static fromJS(data: any): SpellListTypeResult {
    data = typeof data === 'object' ? data : {};
    let result = new SpellListTypeResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Name"] = this.name;
    super.toJSON(data);
    return data;
  }
}

export interface ISpellListTypeResult extends IBaseResult {
  name?: string | undefined;
}

export class SpellUserTypeResult extends BaseResult implements ISpellUserTypeResult {
  name?: string | undefined;

  constructor(data?: ISpellUserTypeResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data["Name"];
    }
  }

  static fromJS(data: any): SpellUserTypeResult {
    data = typeof data === 'object' ? data : {};
    let result = new SpellUserTypeResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Name"] = this.name;
    super.toJSON(data);
    return data;
  }
}

export interface ISpellUserTypeResult extends IBaseResult {
  name?: string | undefined;
}

export class CharacterMovementRateResult implements ICharacterMovementRateResult {
  rate?: string | undefined;
  multiplier?: string | undefined;
  base?: string | undefined;
  feet001?: string | undefined;
  feet003?: string | undefined;
  feet005?: string | undefined;
  feet010?: string | undefined;

  constructor(data?: ICharacterMovementRateResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.rate = _data["Rate"];
      this.multiplier = _data["Multiplier"];
      this.base = _data["Base"];
      this.feet001 = _data["Feet001"];
      this.feet003 = _data["Feet003"];
      this.feet005 = _data["Feet005"];
      this.feet010 = _data["Feet010"];
    }
  }

  static fromJS(data: any): CharacterMovementRateResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterMovementRateResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Rate"] = this.rate;
    data["Multiplier"] = this.multiplier;
    data["Base"] = this.base;
    data["Feet001"] = this.feet001;
    data["Feet003"] = this.feet003;
    data["Feet005"] = this.feet005;
    data["Feet010"] = this.feet010;
    return data;
  }
}

export interface ICharacterMovementRateResult {
  rate?: string | undefined;
  multiplier?: string | undefined;
  base?: string | undefined;
  feet001?: string | undefined;
  feet003?: string | undefined;
  feet005?: string | undefined;
  feet010?: string | undefined;
}

export class CharacterDevelopmentResult extends BaseResult implements ICharacterDevelopmentResult {
  bonus!: number;
  dedicated!: number;
  expandable!: boolean;
  experienceCheck!: boolean;
  experienceCheckTwo!: boolean;
  firstRank!: number;
  levelBonus!: number;
  primary!: number;
  ranks!: number;
  ranksAdded!: number;
  secondRank!: number;
  skillId!: string;
  singleRank!: boolean;
  doesNotDegrade!: boolean;
  sortOrder!: number;
  totalBonus!: number;
  categoryId!: string;
  category?: string | undefined;
  skillName?: string | undefined;
  skillDescription?: string | undefined;
  firstStatId?: string | undefined;
  secondStatId?: string | undefined;
  thirdStatId?: string | undefined;
  firstStatName?: string | undefined;
  cost?: string | undefined;
  stats?: string | undefined;
  thirdStatName?: string | undefined;
  secondStatName?: string | undefined;
  firstStatAbbreviation?: string | undefined;
  secondStatAbbreviation?: string | undefined;
  thirdStatAbbreviation?: string | undefined;
  rankBonusTotal!: number;
  levelBonusTotal!: number;
  statBonusTotal!: number;
  similiarRanks!: number;
  similiarReasoning?: string | undefined;
  similiarRanksUsed!: boolean;

  constructor(data?: ICharacterDevelopmentResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.bonus = _data["Bonus"];
      this.dedicated = _data["Dedicated"];
      this.expandable = _data["Expandable"];
      this.experienceCheck = _data["ExperienceCheck"];
      this.experienceCheckTwo = _data["ExperienceCheckTwo"];
      this.firstRank = _data["FirstRank"];
      this.levelBonus = _data["LevelBonus"];
      this.primary = _data["Primary"];
      this.ranks = _data["Ranks"];
      this.ranksAdded = _data["RanksAdded"];
      this.secondRank = _data["SecondRank"];
      this.skillId = _data["SkillId"];
      this.singleRank = _data["SingleRank"];
      this.doesNotDegrade = _data["DoesNotDegrade"];
      this.sortOrder = _data["SortOrder"];
      this.totalBonus = _data["TotalBonus"];
      this.categoryId = _data["CategoryId"];
      this.category = _data["Category"];
      this.skillName = _data["SkillName"];
      this.skillDescription = _data["SkillDescription"];
      this.firstStatId = _data["FirstStatId"];
      this.secondStatId = _data["SecondStatId"];
      this.thirdStatId = _data["ThirdStatId"];
      this.firstStatName = _data["FirstStatName"];
      this.cost = _data["Cost"];
      this.stats = _data["Stats"];
      this.thirdStatName = _data["ThirdStatName"];
      this.secondStatName = _data["SecondStatName"];
      this.firstStatAbbreviation = _data["FirstStatAbbreviation"];
      this.secondStatAbbreviation = _data["SecondStatAbbreviation"];
      this.thirdStatAbbreviation = _data["ThirdStatAbbreviation"];
      this.rankBonusTotal = _data["RankBonusTotal"];
      this.levelBonusTotal = _data["LevelBonusTotal"];
      this.statBonusTotal = _data["StatBonusTotal"];
      this.similiarRanks = _data["SimiliarRanks"];
      this.similiarReasoning = _data["SimiliarReasoning"];
      this.similiarRanksUsed = _data["SimiliarRanksUsed"];
    }
  }

  static fromJS(data: any): CharacterDevelopmentResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterDevelopmentResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Bonus"] = this.bonus;
    data["Dedicated"] = this.dedicated;
    data["Expandable"] = this.expandable;
    data["ExperienceCheck"] = this.experienceCheck;
    data["ExperienceCheckTwo"] = this.experienceCheckTwo;
    data["FirstRank"] = this.firstRank;
    data["LevelBonus"] = this.levelBonus;
    data["Primary"] = this.primary;
    data["Ranks"] = this.ranks;
    data["RanksAdded"] = this.ranksAdded;
    data["SecondRank"] = this.secondRank;
    data["SkillId"] = this.skillId;
    data["SingleRank"] = this.singleRank;
    data["DoesNotDegrade"] = this.doesNotDegrade;
    data["SortOrder"] = this.sortOrder;
    data["TotalBonus"] = this.totalBonus;
    data["CategoryId"] = this.categoryId;
    data["Category"] = this.category;
    data["SkillName"] = this.skillName;
    data["SkillDescription"] = this.skillDescription;
    data["FirstStatId"] = this.firstStatId;
    data["SecondStatId"] = this.secondStatId;
    data["ThirdStatId"] = this.thirdStatId;
    data["FirstStatName"] = this.firstStatName;
    data["Cost"] = this.cost;
    data["Stats"] = this.stats;
    data["ThirdStatName"] = this.thirdStatName;
    data["SecondStatName"] = this.secondStatName;
    data["FirstStatAbbreviation"] = this.firstStatAbbreviation;
    data["SecondStatAbbreviation"] = this.secondStatAbbreviation;
    data["ThirdStatAbbreviation"] = this.thirdStatAbbreviation;
    data["RankBonusTotal"] = this.rankBonusTotal;
    data["LevelBonusTotal"] = this.levelBonusTotal;
    data["StatBonusTotal"] = this.statBonusTotal;
    data["SimiliarRanks"] = this.similiarRanks;
    data["SimiliarReasoning"] = this.similiarReasoning;
    data["SimiliarRanksUsed"] = this.similiarRanksUsed;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterDevelopmentResult extends IBaseResult {
  bonus: number;
  dedicated: number;
  expandable: boolean;
  experienceCheck: boolean;
  experienceCheckTwo: boolean;
  firstRank: number;
  levelBonus: number;
  primary: number;
  ranks: number;
  ranksAdded: number;
  secondRank: number;
  skillId: string;
  singleRank: boolean;
  doesNotDegrade: boolean;
  sortOrder: number;
  totalBonus: number;
  categoryId: string;
  category?: string | undefined;
  skillName?: string | undefined;
  skillDescription?: string | undefined;
  firstStatId?: string | undefined;
  secondStatId?: string | undefined;
  thirdStatId?: string | undefined;
  firstStatName?: string | undefined;
  cost?: string | undefined;
  stats?: string | undefined;
  thirdStatName?: string | undefined;
  secondStatName?: string | undefined;
  firstStatAbbreviation?: string | undefined;
  secondStatAbbreviation?: string | undefined;
  thirdStatAbbreviation?: string | undefined;
  rankBonusTotal: number;
  levelBonusTotal: number;
  statBonusTotal: number;
  similiarRanks: number;
  similiarReasoning?: string | undefined;
  similiarRanksUsed: boolean;
}

export class CharacterLanguageResult extends BaseResult implements ICharacterLanguageResult {
  language?: string | undefined;
  read!: number;
  speak!: number;

  constructor(data?: ICharacterLanguageResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.language = _data["Language"];
      this.read = _data["Read"];
      this.speak = _data["Speak"];
    }
  }

  static fromJS(data: any): CharacterLanguageResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterLanguageResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Language"] = this.language;
    data["Read"] = this.read;
    data["Speak"] = this.speak;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterLanguageResult extends IBaseResult {
  language?: string | undefined;
  read: number;
  speak: number;
}

export class CharacterLogResult extends BaseResult implements ICharacterLogResult {
  dateCreated!: Date;
  logItem?: string | undefined;

  constructor(data?: ICharacterLogResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.dateCreated = _data["DateCreated"] ? new Date(_data["DateCreated"].toString()) : <any>undefined;
      this.logItem = _data["LogItem"];
    }
  }

  static fromJS(data: any): CharacterLogResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterLogResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["DateCreated"] = this.dateCreated ? this.dateCreated.toISOString() : <any>undefined;
    data["LogItem"] = this.logItem;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterLogResult extends IBaseResult {
  dateCreated: Date;
  logItem?: string | undefined;
}

export class CharacterBaseItemResult extends BaseResult implements ICharacterBaseItemResult {
  name?: string | undefined;
  cost!: number;
  quantity!: number;

  constructor(data?: ICharacterBaseItemResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.name = _data["Name"];
      this.cost = _data["Cost"];
      this.quantity = _data["Quantity"];
    }
  }

  static fromJS(data: any): CharacterBaseItemResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterBaseItemResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Name"] = this.name;
    data["Cost"] = this.cost;
    data["Quantity"] = this.quantity;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterBaseItemResult extends IBaseResult {
  name?: string | undefined;
  cost: number;
  quantity: number;
}

export class CharacterItemResult extends CharacterBaseItemResult implements ICharacterItemResult {
  value?: number | undefined;
  notes?: string | undefined;

  constructor(data?: ICharacterItemResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.value = _data["Value"];
      this.notes = _data["Notes"];
    }
  }

  static fromJS(data: any): CharacterItemResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterItemResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Value"] = this.value;
    data["Notes"] = this.notes;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterItemResult extends ICharacterBaseItemResult {
  value?: number | undefined;
  notes?: string | undefined;
}

export class CharacterRealmResult extends BaseResult implements ICharacterRealmResult {
  realmId?: string | undefined;
  realmName?: string | undefined;

  constructor(data?: ICharacterRealmResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.realmId = _data["RealmId"];
      this.realmName = _data["RealmName"];
    }
  }

  static fromJS(data: any): CharacterRealmResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterRealmResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["RealmId"] = this.realmId;
    data["RealmName"] = this.realmName;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterRealmResult extends IBaseResult {
  realmId?: string | undefined;
  realmName?: string | undefined;
}

export class CharacterSpellListResult extends BaseResult implements ICharacterSpellListResult {
  beginLevel?: number | undefined;
  current?: boolean | undefined;
  endLevel?: number | undefined;
  next?: boolean | undefined;
  spellListId?: string | undefined;
  spellListName?: string | undefined;

  constructor(data?: ICharacterSpellListResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.beginLevel = _data["BeginLevel"];
      this.current = _data["Current"];
      this.endLevel = _data["EndLevel"];
      this.next = _data["Next"];
      this.spellListId = _data["SpellListId"];
      this.spellListName = _data["SpellListName"];
    }
  }

  static fromJS(data: any): CharacterSpellListResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterSpellListResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["BeginLevel"] = this.beginLevel;
    data["Current"] = this.current;
    data["EndLevel"] = this.endLevel;
    data["Next"] = this.next;
    data["SpellListId"] = this.spellListId;
    data["SpellListName"] = this.spellListName;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterSpellListResult extends IBaseResult {
  beginLevel?: number | undefined;
  current?: boolean | undefined;
  endLevel?: number | undefined;
  next?: boolean | undefined;
  spellListId?: string | undefined;
  spellListName?: string | undefined;
}

export class CharacterBaseSpellListResult extends BaseResult implements ICharacterBaseSpellListResult {
  spellListId?: string | undefined;
  spellListName?: string | undefined;

  constructor(data?: ICharacterBaseSpellListResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.spellListId = _data["SpellListId"];
      this.spellListName = _data["SpellListName"];
    }
  }

  static fromJS(data: any): CharacterBaseSpellListResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterBaseSpellListResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["SpellListId"] = this.spellListId;
    data["SpellListName"] = this.spellListName;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterBaseSpellListResult extends IBaseResult {
  spellListId?: string | undefined;
  spellListName?: string | undefined;
}

export class CharacterStatResult extends BaseResult implements ICharacterStatResult {
  potential?: number | undefined;
  racial?: number | undefined;
  roll?: number | undefined;
  name?: string | undefined;
  abbreviation?: string | undefined;
  statisticId!: string;
  statisticName?: string | undefined;
  development!: boolean;
  developmentPoints?: number | undefined;
  powerPoints?: number | undefined;
  bonus?: number | undefined;
  order!: number;
  total?: number | undefined;

  constructor(data?: ICharacterStatResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.potential = _data["Potential"];
      this.racial = _data["Racial"];
      this.roll = _data["Roll"];
      this.name = _data["Name"];
      this.abbreviation = _data["Abbreviation"];
      this.statisticId = _data["StatisticId"];
      this.statisticName = _data["StatisticName"];
      this.development = _data["Development"];
      this.developmentPoints = _data["DevelopmentPoints"];
      this.powerPoints = _data["PowerPoints"];
      this.bonus = _data["Bonus"];
      this.order = _data["Order"];
      this.total = _data["Total"];
    }
  }

  static fromJS(data: any): CharacterStatResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterStatResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Potential"] = this.potential;
    data["Racial"] = this.racial;
    data["Roll"] = this.roll;
    data["Name"] = this.name;
    data["Abbreviation"] = this.abbreviation;
    data["StatisticId"] = this.statisticId;
    data["StatisticName"] = this.statisticName;
    data["Development"] = this.development;
    data["DevelopmentPoints"] = this.developmentPoints;
    data["PowerPoints"] = this.powerPoints;
    data["Bonus"] = this.bonus;
    data["Order"] = this.order;
    data["Total"] = this.total;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterStatResult extends IBaseResult {
  potential?: number | undefined;
  racial?: number | undefined;
  roll?: number | undefined;
  name?: string | undefined;
  abbreviation?: string | undefined;
  statisticId: string;
  statisticName?: string | undefined;
  development: boolean;
  developmentPoints?: number | undefined;
  powerPoints?: number | undefined;
  bonus?: number | undefined;
  order: number;
  total?: number | undefined;
}

export class CharacterExperienceLogResult extends BaseResult implements ICharacterExperienceLogResult {
  dateTime!: Date;
  notes?: string | undefined;
  experience!: number;

  constructor(data?: ICharacterExperienceLogResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.dateTime = _data["DateTime"] ? new Date(_data["DateTime"].toString()) : <any>undefined;
      this.notes = _data["Notes"];
      this.experience = _data["Experience"];
    }
  }

  static fromJS(data: any): CharacterExperienceLogResult {
    data = typeof data === 'object' ? data : {};
    let result = new CharacterExperienceLogResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["DateTime"] = this.dateTime ? this.dateTime.toISOString() : <any>undefined;
    data["Notes"] = this.notes;
    data["Experience"] = this.experience;
    super.toJSON(data);
    return data;
  }
}

export interface ICharacterExperienceLogResult extends IBaseResult {
  dateTime: Date;
  notes?: string | undefined;
  experience: number;
}

export class AnalyzeSimilarResult implements IAnalyzeSimilarResult {
  analyzeSimilarItems?: AnalyzeSimilarItem[] | undefined;

  constructor(data?: IAnalyzeSimilarResult) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      if (Array.isArray(_data["AnalyzeSimilarItems"])) {
        this.analyzeSimilarItems = [] as any;
        for (let item of _data["AnalyzeSimilarItems"])
          this.analyzeSimilarItems!.push(AnalyzeSimilarItem.fromJS(item));
      }
    }
  }

  static fromJS(data: any): AnalyzeSimilarResult {
    data = typeof data === 'object' ? data : {};
    let result = new AnalyzeSimilarResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.analyzeSimilarItems)) {
      data["AnalyzeSimilarItems"] = [];
      for (let item of this.analyzeSimilarItems)
        data["AnalyzeSimilarItems"].push(item.toJSON());
    }
    return data;
  }
}

export interface IAnalyzeSimilarResult {
  analyzeSimilarItems?: AnalyzeSimilarItem[] | undefined;
}

export class AnalyzeSimilarItem implements IAnalyzeSimilarItem {
  skill?: CharacterDevelopmentResult | undefined;
  sumOfEffected!: number;
  effectedSkillsString?: string | undefined;
  costToPurchase!: number;
  effectedSkills?: CharacterDevelopmentResult[] | undefined;

  constructor(data?: IAnalyzeSimilarItem) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.skill = _data["Skill"] ? CharacterDevelopmentResult.fromJS(_data["Skill"]) : <any>undefined;
      this.sumOfEffected = _data["SumOfEffected"];
      this.effectedSkillsString = _data["EffectedSkillsString"];
      this.costToPurchase = _data["CostToPurchase"];
      if (Array.isArray(_data["EffectedSkills"])) {
        this.effectedSkills = [] as any;
        for (let item of _data["EffectedSkills"])
          this.effectedSkills!.push(CharacterDevelopmentResult.fromJS(item));
      }
    }
  }

  static fromJS(data: any): AnalyzeSimilarItem {
    data = typeof data === 'object' ? data : {};
    let result = new AnalyzeSimilarItem();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Skill"] = this.skill ? this.skill.toJSON() : <any>undefined;
    data["SumOfEffected"] = this.sumOfEffected;
    data["EffectedSkillsString"] = this.effectedSkillsString;
    data["CostToPurchase"] = this.costToPurchase;
    if (Array.isArray(this.effectedSkills)) {
      data["EffectedSkills"] = [];
      for (let item of this.effectedSkills)
        data["EffectedSkills"].push(item.toJSON());
    }
    return data;
  }
}

export interface IAnalyzeSimilarItem {
  skill?: CharacterDevelopmentResult | undefined;
  sumOfEffected: number;
  effectedSkillsString?: string | undefined;
  costToPurchase: number;
  effectedSkills?: CharacterDevelopmentResult[] | undefined;
}

export class ApiResultOfAnalyzeSimilarResult extends ApiResult implements IApiResultOfAnalyzeSimilarResult {
  content?: AnalyzeSimilarResult | undefined;

  constructor(data?: IApiResultOfAnalyzeSimilarResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.content = _data["Content"] ? AnalyzeSimilarResult.fromJS(_data["Content"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ApiResultOfAnalyzeSimilarResult {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResultOfAnalyzeSimilarResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Content"] = this.content ? this.content.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IApiResultOfAnalyzeSimilarResult extends IApiResult {
  content?: AnalyzeSimilarResult | undefined;
}

export class ApiResultOfListOfCharacterResult extends ApiResult implements IApiResultOfListOfCharacterResult {
  content?: CharacterResult[] | undefined;

  constructor(data?: IApiResultOfListOfCharacterResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      if (Array.isArray(_data["Content"])) {
        this.content = [] as any;
        for (let item of _data["Content"])
          this.content!.push(CharacterResult.fromJS(item));
      }
    }
  }

  static fromJS(data: any): ApiResultOfListOfCharacterResult {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResultOfListOfCharacterResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.content)) {
      data["Content"] = [];
      for (let item of this.content)
        data["Content"].push(item.toJSON());
    }
    super.toJSON(data);
    return data;
  }
}

export interface IApiResultOfListOfCharacterResult extends IApiResult {
  content?: CharacterResult[] | undefined;
}

export class PageRequestInfo implements IPageRequestInfo {
  requestedPage!: number;
  requestedPageSize!: number;
  sortExpression?: string | undefined;

  constructor(data?: IPageRequestInfo) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.requestedPage = _data["RequestedPage"];
      this.requestedPageSize = _data["RequestedPageSize"];
      this.sortExpression = _data["SortExpression"];
    }
  }

  static fromJS(data: any): PageRequestInfo {
    data = typeof data === 'object' ? data : {};
    let result = new PageRequestInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["RequestedPage"] = this.requestedPage;
    data["RequestedPageSize"] = this.requestedPageSize;
    data["SortExpression"] = this.sortExpression;
    return data;
  }
}

export interface IPageRequestInfo {
  requestedPage: number;
  requestedPageSize: number;
  sortExpression?: string | undefined;
}

export class WorldPageRequestInfo extends PageRequestInfo implements IWorldPageRequestInfo {
  worldId!: string;

  constructor(data?: IWorldPageRequestInfo) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.worldId = _data["WorldId"];
    }
  }

  static fromJS(data: any): WorldPageRequestInfo {
    data = typeof data === 'object' ? data : {};
    let result = new WorldPageRequestInfo();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["WorldId"] = this.worldId;
    super.toJSON(data);
    return data;
  }
}

export interface IWorldPageRequestInfo extends IPageRequestInfo {
  worldId: string;
}

export class PageRequestByCampaign extends WorldPageRequestInfo implements IPageRequestByCampaign {
  campaign?: string | undefined;

  constructor(data?: IPageRequestByCampaign) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.campaign = _data["Campaign"];
    }
  }

  static fromJS(data: any): PageRequestByCampaign {
    data = typeof data === 'object' ? data : {};
    let result = new PageRequestByCampaign();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Campaign"] = this.campaign;
    super.toJSON(data);
    return data;
  }
}

export interface IPageRequestByCampaign extends IWorldPageRequestInfo {
  campaign?: string | undefined;
}

export class ApiResultOfWorldResult extends ApiResult implements IApiResultOfWorldResult {
  content?: WorldResult | undefined;

  constructor(data?: IApiResultOfWorldResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.content = _data["Content"] ? WorldResult.fromJS(_data["Content"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ApiResultOfWorldResult {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResultOfWorldResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Content"] = this.content ? this.content.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IApiResultOfWorldResult extends IApiResult {
  content?: WorldResult | undefined;
}

export class ApiResultOfStringOf extends ApiResult implements IApiResultOfStringOf {
  content?: string[] | undefined;

  constructor(data?: IApiResultOfStringOf) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      if (Array.isArray(_data["Content"])) {
        this.content = [] as any;
        for (let item of _data["Content"])
          this.content!.push(item);
      }
    }
  }

  static fromJS(data: any): ApiResultOfStringOf {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResultOfStringOf();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    if (Array.isArray(this.content)) {
      data["Content"] = [];
      for (let item of this.content)
        data["Content"].push(item);
    }
    super.toJSON(data);
    return data;
  }
}

export interface IApiResultOfStringOf extends IApiResult {
  content?: string[] | undefined;
}

export class WorldSkillNameUpdateRequest implements IWorldSkillNameUpdateRequest {
  skillId!: string;
  newName?: string | undefined;

  constructor(data?: IWorldSkillNameUpdateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.skillId = _data["SkillId"];
      this.newName = _data["NewName"];
    }
  }

  static fromJS(data: any): WorldSkillNameUpdateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new WorldSkillNameUpdateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["SkillId"] = this.skillId;
    data["NewName"] = this.newName;
    return data;
  }
}

export interface IWorldSkillNameUpdateRequest {
  skillId: string;
  newName?: string | undefined;
}

export class WorldSkillEditRequest implements IWorldSkillEditRequest {
  skill?: SkillResult | undefined;

  constructor(data?: IWorldSkillEditRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.skill = _data["Skill"] ? SkillResult.fromJS(_data["Skill"]) : <any>undefined;
    }
  }

  static fromJS(data: any): WorldSkillEditRequest {
    data = typeof data === 'object' ? data : {};
    let result = new WorldSkillEditRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Skill"] = this.skill ? this.skill.toJSON() : <any>undefined;
    return data;
  }
}

export interface IWorldSkillEditRequest {
  skill?: SkillResult | undefined;
}

export class ApiResultOfSkillResult extends ApiResult implements IApiResultOfSkillResult {
  content?: SkillResult | undefined;

  constructor(data?: IApiResultOfSkillResult) {
    super(data);
  }

  init(_data?: any) {
    super.init(_data);
    if (_data) {
      this.content = _data["Content"] ? SkillResult.fromJS(_data["Content"]) : <any>undefined;
    }
  }

  static fromJS(data: any): ApiResultOfSkillResult {
    data = typeof data === 'object' ? data : {};
    let result = new ApiResultOfSkillResult();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Content"] = this.content ? this.content.toJSON() : <any>undefined;
    super.toJSON(data);
    return data;
  }
}

export interface IApiResultOfSkillResult extends IApiResult {
  content?: SkillResult | undefined;
}

export class WorldCharacterCreateRequest implements IWorldCharacterCreateRequest {
  id!: string;
  characterName?: string | undefined;
  classId!: string;
  campaign?: string | undefined;

  constructor(data?: IWorldCharacterCreateRequest) {
    if (data) {
      for (var property in data) {
        if (data.hasOwnProperty(property))
          (<any>this)[property] = (<any>data)[property];
      }
    }
  }

  init(_data?: any) {
    if (_data) {
      this.id = _data["Id"];
      this.characterName = _data["CharacterName"];
      this.classId = _data["ClassId"];
      this.campaign = _data["Campaign"];
    }
  }

  static fromJS(data: any): WorldCharacterCreateRequest {
    data = typeof data === 'object' ? data : {};
    let result = new WorldCharacterCreateRequest();
    result.init(data);
    return result;
  }

  toJSON(data?: any) {
    data = typeof data === 'object' ? data : {};
    data["Id"] = this.id;
    data["CharacterName"] = this.characterName;
    data["ClassId"] = this.classId;
    data["Campaign"] = this.campaign;
    return data;
  }
}

export interface IWorldCharacterCreateRequest {
  id: string;
  characterName?: string | undefined;
  classId: string;
  campaign?: string | undefined;
}

export class SwaggerResponse<TResult> {
  status: number;
  headers: { [key: string]: any; };
  result: TResult;

  constructor(status: number, headers: { [key: string]: any; }, result: TResult) {
    this.status = status;
    this.headers = headers;
    this.result = result;
  }
}

export class SwaggerException extends Error {
  message: string;
  status: number;
  response: string;
  headers: { [key: string]: any; };
  result: any;

  constructor(message: string, status: number, response: string, headers: { [key: string]: any; }, result: any) {
    super();

    this.message = message;
    this.status = status;
    this.response = response;
    this.headers = headers;
    this.result = result;
  }

  protected isSwaggerException = true;

  static isSwaggerException(obj: any): obj is SwaggerException {
    return obj.isSwaggerException === true;
  }
}

function throwException(message: string, status: number, response: string, headers: { [key: string]: any; }, result?: any): any {
  throw new SwaggerException(message, status, response, headers, result);
}
